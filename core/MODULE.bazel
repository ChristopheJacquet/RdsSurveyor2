module(name = "rds-surveyor", version = "2.0-alpha.1")

# https://github.com/aspect-build/rules_ts/releases
bazel_dep(name = "aspect_rules_ts", version = "3.0.0")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)

rules_ts_ext.deps(
    ts_version_from = "//:package.json",
)

use_repo(rules_ts_ext, "npm_typescript")


# https://github.com/aspect-build/rules_jasmine/releases
bazel_dep(name = "aspect_rules_jasmine", version = "2.0.0")

# https://github.com/aspect-build/bazel-lib/releases
# Unsure why one has to explicitly reference this depency. Otherwise bazel
# chokes on jasmine_test with "unknown repo 'aspect_bazel_lib'".
bazel_dep(name = "aspect_bazel_lib", version = "2.8.0")

# https://github.com/aspect-build/rules_js/releases
bazel_dep(name = "aspect_rules_js", version = "2.0.0")

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
bazel_dep(name = "rules_nodejs", version = "6.2.0")
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "16.14.2")
#################################

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)

use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")
